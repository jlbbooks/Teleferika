import 'dart:io';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path/path.dart' as p; // For p.basename, p.join
import 'package:path_provider/path_provider.dart';
import 'package:teleferika/utils/uuid_generator.dart';

import 'db/models/image_model.dart'; // Hypothetical path to your ImageModel

class PhotoManagerWidget extends StatefulWidget {
  final List<ImageModel> initialImages;
  final Function(List<ImageModel> updatedImages) onImageListChanged;
  final String pointId; // Crucial: This is the FK for ImageModel

  const PhotoManagerWidget({
    super.key,
    required this.initialImages,
    required this.onImageListChanged,
    required this.pointId,
  });

  @override
  State<PhotoManagerWidget> createState() => _PhotoManagerWidgetState();
}

class _PhotoManagerWidgetState extends State<PhotoManagerWidget> {
  late List<ImageModel> _images;
  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    // Sort initial images by ordinalNumber and copy to a mutable list
    _images = List<ImageModel>.from(widget.initialImages);
    _images.sort((a, b) => a.ordinalNumber.compareTo(b.ordinalNumber));
  }

  Future<Directory> _getPointPhotosDirectory() async {
    final appDocDir = await getApplicationDocumentsDirectory();
    // Using pointId ensures photos for different points are stored separately
    final pointPhotosDir = Directory(
      p.join(appDocDir.path, 'point_photos', widget.pointId),
    );
    if (!await pointPhotosDir.exists()) {
      await pointPhotosDir.create(recursive: true);
    }
    return pointPhotosDir;
  }

  Future<String?> _saveImageFileToAppStorage(XFile imageFile) async {
    try {
      final pointPhotosDir = await _getPointPhotosDirectory();
      // Use a UUID for the filename to ensure uniqueness, even if user picks same photo twice
      final uniqueFileName = '${generateUuid()}${p.extension(imageFile.path)}';
      final newPath = p.join(pointPhotosDir.path, uniqueFileName);
      final savedFile = await File(imageFile.path).copy(newPath);
      return savedFile.path;
    } catch (e) {
      debugPrint("Error saving image to app storage: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving image: ${e.toString()}')),
        );
      }
      return null;
    }
  }

  Future<void> _pickImage(ImageSource source) async {
    try {
      final XFile? pickedFile = await _picker.pickImage(
        source: source,
        imageQuality: 80,
      );

      if (pickedFile != null) {
        final savedPath = await _saveImageFileToAppStorage(pickedFile);
        if (savedPath != null) {
          setState(() {
            // Determine the next ordinal number
            final nextOrdinal = _images.isNotEmpty
                ? (_images
                          .map((img) => img.ordinalNumber)
                          .reduce((a, b) => a > b ? a : b) +
                      1)
                : 0;
            final newImage = ImageModel(
              pointId: widget.pointId,
              ordinalNumber: nextOrdinal,
              imagePath: savedPath,
              // id will be generated by ImageModel constructor
            );
            _images.add(newImage);
            // No need to sort here as new items are added to the end with highest ordinal
          });
          widget.onImageListChanged(
            List<ImageModel>.from(_images),
          ); // Pass a copy
        }
      }
    } catch (e) {
      debugPrint("Error picking image: $e");
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error picking image: ${e.toString()}')),
        );
      }
    }
  }

  void _deletePhoto(int index) async {
    if (index < 0 || index >= _images.length) return;

    final ImageModel imageToDelete = _images[index];

    final bool? confirmed = await showDialog<bool>(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: const Text('Delete Photo?'),
          content: Text(
            'Are you sure you want to delete photo ${imageToDelete.ordinalNumber + 1}?',
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () => Navigator.of(dialogContext).pop(false),
            ),
            TextButton(
              child: Text(
                'Delete',
                style: TextStyle(color: Theme.of(context).colorScheme.error),
              ),
              onPressed: () => Navigator.of(dialogContext).pop(true),
            ),
          ],
        );
      },
    );

    if (confirmed == true) {
      try {
        final fileToDelete = File(imageToDelete.imagePath);
        if (await fileToDelete.exists()) {
          await fileToDelete.delete();
        }
        setState(() {
          _images.removeAt(index);
          // Re-calculate ordinal numbers for remaining images
          _updateOrdinalNumbers();
        });
        widget.onImageListChanged(
          List<ImageModel>.from(_images),
        ); // Pass a copy
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Photo deleted'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } catch (e) {
        debugPrint("Error deleting file: $e");
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error deleting photo: ${e.toString()}')),
          );
        }
      }
    }
  }

  void _updateOrdinalNumbers() {
    for (int i = 0; i < _images.length; i++) {
      if (_images[i].ordinalNumber != i) {
        // Create a new instance with the updated ordinal number
        // Assuming ImageModel has a copyWith method as per your provided model
        _images[i] = _images[i].copyWith(ordinalNumber: i);
      }
    }
  }

  void _showAddPhotoOptions() {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext bc) {
        return SafeArea(
          child: Wrap(
            children: <Widget>[
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('Gallery'),
                onTap: () {
                  Navigator.of(context).pop();
                  _pickImage(ImageSource.gallery);
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_camera),
                title: const Text('Camera'),
                onTap: () {
                  Navigator.of(context).pop();
                  _pickImage(ImageSource.camera);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Photos (${_images.length})',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            IconButton(
              icon: const Icon(Icons.add_a_photo_outlined),
              tooltip: 'Add Photo',
              onPressed: _showAddPhotoOptions,
            ),
          ],
        ),
        const SizedBox(height: 8),
        _images.isEmpty
            ? Container(
                height: 100, // Or some appropriate placeholder size
                decoration: BoxDecoration(
                  color: Colors.grey[200],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[400]!),
                ),
                alignment: Alignment.center,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.photo_album_outlined,
                      size: 30,
                      color: Colors.grey[600],
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'No photos yet.',
                      style: TextStyle(color: Colors.grey[700]),
                    ),
                  ],
                ),
              )
            : SizedBox(
                height: 120, // Adjust as needed
                child: ReorderableListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: _images.length,
                  itemBuilder: (context, index) {
                    final imageModel = _images[index];
                    return Card(
                      key: ValueKey(
                        imageModel.id ?? imageModel.imagePath,
                      ), // Use unique ID from ImageModel
                      elevation: 2.0,
                      margin: const EdgeInsets.symmetric(
                        horizontal: 6,
                        vertical: 4,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Stack(
                        alignment: Alignment.topRight,
                        children: [
                          ClipRRect(
                            borderRadius: BorderRadius.circular(8.0),
                            child: Image.file(
                              File(imageModel.imagePath),
                              width: 100,
                              height: 100,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) {
                                return Container(
                                  width: 100,
                                  height: 100,
                                  color: Colors.grey[300],
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.broken_image,
                                        color: Colors.grey[600],
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        'Error',
                                        style: TextStyle(
                                          fontSize: 10,
                                          color: Colors.grey[700],
                                        ),
                                      ),
                                    ],
                                  ),
                                );
                              },
                            ),
                          ),
                          Container(
                            margin: const EdgeInsets.all(4),
                            decoration: BoxDecoration(
                              color: Colors.black.withAlpha(
                                (0.6 * 255).round(),
                              ), // Using withAlpha
                              shape: BoxShape.circle,
                            ),
                            child: Material(
                              // Added Material for InkWell splash effect
                              color: Colors.transparent,
                              child: InkWell(
                                borderRadius: BorderRadius.circular(
                                  12,
                                ), // Match shape
                                onTap: () => _deletePhoto(index),
                                child: const Padding(
                                  padding: EdgeInsets.all(
                                    2.0,
                                  ), // Padding inside the circle
                                  child: Icon(
                                    Icons.close,
                                    color: Colors.white,
                                    size: 16, // Adjusted for padding
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                  onReorder: (int oldIndex, int newIndex) {
                    setState(() {
                      if (newIndex > oldIndex) {
                        newIndex -= 1;
                      }
                      final ImageModel item = _images.removeAt(oldIndex);
                      _images.insert(newIndex, item);
                      _updateOrdinalNumbers(); // Update ordinal numbers after reorder
                    });
                    widget.onImageListChanged(
                      List<ImageModel>.from(_images),
                    ); // Pass a copy
                  },
                ),
              ),
      ],
    );
  }
}
